/**
 * Composable pour la gestion optimis√©e des ic√¥nes avec fallback
 * R√©sout les probl√®mes d'affichage des ic√¥nes Heroicons
 */

export const useIconManager = () => {
  /**
   * Mapping des ic√¥nes avec fallback emoji et alternatives
   */
  const iconMap = {
    // Ic√¥nes d'authentification et s√©curit√©
    'heroicons:shield-check': { emoji: 'üõ°Ô∏è', alt: 'security' },
    'heroicons:arrow-right-on-rectangle': { emoji: 'üîë', alt: 'login' },
    'heroicons:home': { emoji: 'üè†', alt: 'home' },
    'heroicons:document-text': { emoji: 'üìÑ', alt: 'document' },
    
    // Ic√¥nes d'√©tat
    'heroicons:check-circle': { emoji: '‚úÖ', alt: 'success' },
    'heroicons:check': { emoji: '‚úÖ', alt: 'check' },
    'heroicons:exclamation-triangle': { emoji: '‚ö†Ô∏è', alt: 'warning' },
    'heroicons:x-mark': { emoji: '‚ùå', alt: 'close' },
    'heroicons:arrow-path': { emoji: '‚Üª', alt: 'refresh' },
    
    // Ic√¥nes de navigation
    'heroicons:chevron-left': { emoji: '‚Äπ', alt: 'previous' },
    'heroicons:chevron-right': { emoji: '‚Ä∫', alt: 'next' },
    'heroicons:arrow-left': { emoji: '‚Üê', alt: 'back' },
    
    // Ic√¥nes d'action
    'heroicons:heart': { emoji: '‚ù§Ô∏è', alt: 'favorite' },
    'heroicons:magnifying-glass': { emoji: 'üîç', alt: 'search' },
    'heroicons:play': { emoji: '‚ñ∂Ô∏è', alt: 'play' },
    'heroicons:clock': { emoji: 'üïê', alt: 'time' },
    'heroicons:queue-list': { emoji: 'üìã', alt: 'list' },
    'heroicons:tag': { emoji: 'üè∑Ô∏è', alt: 'tag' },
    'heroicons:document-duplicate': { emoji: 'üìÑ', alt: 'duplicate' },
  }

  /**
   * V√©rifie si une ic√¥ne est disponible
   */
  const isIconAvailable = (iconName: string): boolean => {
    return !!iconMap[iconName]
  }

  /**
   * Obtient l'emoji de fallback pour une ic√¥ne
   */
  const getIconFallback = (iconName: string): string => {
    return iconMap[iconName]?.emoji || '‚óè'
  }

  /**
   * Obtient le texte alternatif pour une ic√¥ne
   */
  const getIconAlt = (iconName: string): string => {
    return iconMap[iconName]?.alt || 'icon'
  }

  /**
   * G√©n√®re les props optimis√©es pour un composant Icon
   */
  const getIconProps = (iconName: string, fallback?: string) => {
    return {
      name: iconName,
      fallback: fallback || getIconFallback(iconName),
      alt: getIconAlt(iconName),
      role: 'img',
      'aria-label': getIconAlt(iconName)
    }
  }

  /**
   * V√©rifie si le module @nuxt/icon est disponible
   */
  const checkIconModule = () => {
    try {
      // V√©rification de la disponibilit√© du module
      return process.client && window.nuxt?.app?.config?.icon !== undefined
    } catch {
      return false
    }
  }

  /**
   * Rendu conditionnel d'ic√¥ne avec fallback intelligent
   */
  const renderIcon = (iconName: string, classes: string = '', fallback?: string) => {
    const props = getIconProps(iconName, fallback)
    const iconClasses = `inline-block ${classes}`
    
    return {
      component: 'Icon',
      props: {
        ...props,
        class: iconClasses
      }
    }
  }

  return {
    iconMap,
    isIconAvailable,
    getIconFallback,
    getIconAlt,
    getIconProps,
    checkIconModule,
    renderIcon
  }
}

/**
 * Types TypeScript pour le syst√®me d'ic√¥nes
 */
export interface IconConfig {
  emoji: string
  alt: string
}

export interface IconProps {
  name: string
  fallback?: string
  alt?: string
  role?: string
  'aria-label'?: string
}
